# ✅ Novera-A1 System Architecture Map

This document outlines the modular architecture of **Novera-A1**, designed for fast, intelligent, and humanlike interaction.

---

## 🧭 6-Part System Map

        ┌────────────────────────┐
        │ P1: Decision Core      │
        │ (Reasoning + Intent)   │  core/decision__Core.py
        └─────────┬──────────────┘
                  ▼
        ┌────────────────────────┐ 
        │ P2: Task Orchestrator  │  core/router.py
        │ (Parse + Dispatch)     │  + core/handlers/task__handler.py
        └─────────┬──────────────┘ 
                  ▼
        ┌────────────────────────┐
        │ P3: Knowledge Vault    │  engine/llm/utils.py
        │ (History + Caching)    │
        └─────────┬──────────────┘
        ┌────────────────────────┐ 
        │ P4: Context Engine     │  core/emotion__core.py
        │ (Emotion + Awareness)  │  (in progress)
        └─────────┬──────────────┘ 
        ┌────────────────────────┐
        │ P5: Action Layer       │  engine/controle__unit/controller.py
        │ (Execute + Respond)    │  + handlers
        └─────────┬──────────────┘
                  │                          
                  ▼                          
        ┌───────────────────────┐
        │ P6: Feedback Loop     │  planned
        │ (Learning + Tuning)   │
        └───────────────────────┘


---

## 🔍 Module Mapping & Status

- Decision Core: Ready — `core/decision__Core.py`
- Router: Ready — `core/router.py`
- Handlers: Basic (in progress) — `core/handlers/task__handler.py`
- Emotion Core (in progress): `core/emotion__core.py`
- State Manager (experimental): `core/handlers/state__manager.py`
- Controller/Portal: MVP — `engine/controle__unit/controller.py`
- LLM Client: Ready — `engine/llm/LLMClient.py`, `engine/llm/Client__loader.py`
- Utilities (history/logging): Ready — `engine/llm/utils.py`
- Config: Ready — `engine/Config/config.py`, `engine/Config/logger.py`, `engine/Config/instructions.py`

Formatting for in-progress items:
`Component (in progress): {short description}`

- Emotion Core (in progress): Planned emotional state tracking and adaptive tone control.
- Handlers (in progress): Extend stubs to real integrations (schedulers, search APIs, media, etc.).
- Feedback Loop (planned): Telemetry-driven tuning and self-adjustment.

---

## 🔀 Decision Core → Router Flow

1. User query enters Decision Core (`core/decision__Core.py`)
2. Core emits normalized directives (e.g., `general …`, `open chrome`)
3. Router (`core/router.py`) parses directives → task types
4. Router dispatches to handler stubs
5. Handlers perform action (current MVP) or return capability flags

---

## 📎 Summary

This architecture combines **speed**, **intelligence**, and **emotional depth**. Each part works in tandem to ensure smooth, intelligent interactions with minimal delay.

